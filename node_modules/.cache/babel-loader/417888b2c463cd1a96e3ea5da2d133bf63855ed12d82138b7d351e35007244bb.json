{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'TestGroup',\n  props: {\n    group: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      isRunning: false\n    };\n  },\n  methods: {\n    getStatusText(status) {\n      const statusMap = {\n        'idle': '未开始',\n        'running': '进行中',\n        'success': '成功',\n        'failure': '失败'\n      };\n      return statusMap[status] || status;\n    },\n    async runTest(testCase) {\n      testCase.status = 'running';\n      try {\n        const response = await axios.post('http://localhost:8080/runTest', {\n          groupName: this.group.name,\n          testName: testCase.name\n        });\n        testCase.status = response.data.success ? 'success' : 'failure';\n        testCase.result = response.data.result;\n        return response.data.success;\n      } catch (error) {\n        testCase.status = 'failure';\n        testCase.result = error.message;\n        return false;\n      }\n    },\n    async runAllTests() {\n      this.isRunning = true;\n      for (let testCase of this.group.testCases) {\n        const success = await this.runTest(testCase);\n        if (!success) break;\n      }\n      this.isRunning = false;\n    },\n    async runSingleTest(index) {\n      if (this.isRunning || this.group.testCases[index].status === 'running') {\n        return;\n      }\n      await this.runTest(this.group.testCases[index]);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","group","type","Object","required","data","isRunning","methods","getStatusText","status","statusMap","runTest","testCase","response","post","groupName","testName","success","result","error","message","runAllTests","testCases","runSingleTest","index"],"sources":["/Users/rika/work/src/auto-test/src/components/TestGroup.vue"],"sourcesContent":["<template>\n  <div class=\"test-group\">\n    <h2>{{ group.name }}</h2>\n    <div class=\"test-cases\">\n      <div\n          v-for=\"(testCase, index) in group.testCases\"\n          :key=\"index\"\n          class=\"test-case\"\n          :class=\"{\n          'running': testCase.status === 'running',\n          'success': testCase.status === 'success',\n          'failure': testCase.status === 'failure'\n        }\"\n          @click=\"runSingleTest(index)\"\n      >\n        <h3>{{ testCase.name }}</h3>\n        <p>状态: {{ getStatusText(testCase.status) }}</p>\n        <p v-if=\"testCase.result\">结果: {{ testCase.result }}</p>\n      </div>\n    </div>\n    <button @click=\"runAllTests\" :disabled=\"isRunning\">运行所有测试</button>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'TestGroup',\n  props: {\n    group: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      isRunning: false\n    }\n  },\n  methods: {\n    getStatusText(status) {\n      const statusMap = {\n        'idle': '未开始',\n        'running': '进行中',\n        'success': '成功',\n        'failure': '失败'\n      };\n      return statusMap[status] || status;\n    },\n    async runTest(testCase) {\n      testCase.status = 'running';\n      try {\n        const response = await axios.post('http://localhost:8080/runTest', {\n          groupName: this.group.name,\n          testName: testCase.name\n        });\n        testCase.status = response.data.success ? 'success' : 'failure';\n        testCase.result = response.data.result;\n        return response.data.success;\n      } catch (error) {\n        testCase.status = 'failure';\n        testCase.result = error.message;\n        return false;\n      }\n    },\n    async runAllTests() {\n      this.isRunning = true;\n      for (let testCase of this.group.testCases) {\n        const success = await this.runTest(testCase);\n        if (!success) break;\n      }\n      this.isRunning = false;\n    },\n    async runSingleTest(index) {\n      if (this.isRunning || this.group.testCases[index].status === 'running') {\n        return;\n      }\n      await this.runTest(this.group.testCases[index]);\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* 样式保持不变 */\n</style>"],"mappings":"AAyBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,aAAaA,CAACC,MAAM,EAAE;MACpB,MAAMC,SAAQ,GAAI;QAChB,MAAM,EAAE,KAAK;QACb,SAAS,EAAE,KAAK;QAChB,SAAS,EAAE,IAAI;QACf,SAAS,EAAE;MACb,CAAC;MACD,OAAOA,SAAS,CAACD,MAAM,KAAKA,MAAM;IACpC,CAAC;IACD,MAAME,OAAOA,CAACC,QAAQ,EAAE;MACtBA,QAAQ,CAACH,MAAK,GAAI,SAAS;MAC3B,IAAI;QACF,MAAMI,QAAO,GAAI,MAAMf,KAAK,CAACgB,IAAI,CAAC,+BAA+B,EAAE;UACjEC,SAAS,EAAE,IAAI,CAACd,KAAK,CAACF,IAAI;UAC1BiB,QAAQ,EAAEJ,QAAQ,CAACb;QACrB,CAAC,CAAC;QACFa,QAAQ,CAACH,MAAK,GAAII,QAAQ,CAACR,IAAI,CAACY,OAAM,GAAI,SAAQ,GAAI,SAAS;QAC/DL,QAAQ,CAACM,MAAK,GAAIL,QAAQ,CAACR,IAAI,CAACa,MAAM;QACtC,OAAOL,QAAQ,CAACR,IAAI,CAACY,OAAO;MAC9B,EAAE,OAAOE,KAAK,EAAE;QACdP,QAAQ,CAACH,MAAK,GAAI,SAAS;QAC3BG,QAAQ,CAACM,MAAK,GAAIC,KAAK,CAACC,OAAO;QAC/B,OAAO,KAAK;MACd;IACF,CAAC;IACD,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,CAACf,SAAQ,GAAI,IAAI;MACrB,KAAK,IAAIM,QAAO,IAAK,IAAI,CAACX,KAAK,CAACqB,SAAS,EAAE;QACzC,MAAML,OAAM,GAAI,MAAM,IAAI,CAACN,OAAO,CAACC,QAAQ,CAAC;QAC5C,IAAI,CAACK,OAAO,EAAE;MAChB;MACA,IAAI,CAACX,SAAQ,GAAI,KAAK;IACxB,CAAC;IACD,MAAMiB,aAAaA,CAACC,KAAK,EAAE;MACzB,IAAI,IAAI,CAAClB,SAAQ,IAAK,IAAI,CAACL,KAAK,CAACqB,SAAS,CAACE,KAAK,CAAC,CAACf,MAAK,KAAM,SAAS,EAAE;QACtE;MACF;MACA,MAAM,IAAI,CAACE,OAAO,CAAC,IAAI,CAACV,KAAK,CAACqB,SAAS,CAACE,KAAK,CAAC,CAAC;IACjD;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}