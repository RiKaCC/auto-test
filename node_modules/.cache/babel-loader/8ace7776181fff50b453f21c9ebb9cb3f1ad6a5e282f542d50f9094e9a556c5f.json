{"ast":null,"code":"import { ref } from 'vue';\nexport default {\n  name: 'TestGroup',\n  props: {\n    group: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const isRunning = ref(false);\n    const getStatusText = status => {\n      const statusMap = {\n        'idle': '未开始',\n        'running': '进行中',\n        'success': '成功',\n        'failure': '失败'\n      };\n      return statusMap[status] || status;\n    };\n    const runTest = async testCase => {\n      testCase.status = 'running';\n      // 模拟异步测试运行\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      testCase.status = Math.random() > 0.5 ? 'success' : 'failure';\n      testCase.result = testCase.status === 'success' ? '测试通过' : '测试失败';\n      return testCase.status === 'success';\n    };\n    const runAllTests = async () => {\n      isRunning.value = true;\n      for (let testCase of props.group.testCases) {\n        const success = await runTest(testCase);\n        if (!success) break;\n      }\n      isRunning.value = false;\n    };\n    const runSingleTest = async testCase => {\n      if (isRunning.value || testCase.status === 'running') {\n        return;\n      }\n      await runTest(testCase);\n    };\n    return {\n      isRunning,\n      getStatusText,\n      runAllTests,\n      runSingleTest\n    };\n  }\n};","map":{"version":3,"names":["ref","name","props","group","type","Object","required","setup","isRunning","getStatusText","status","statusMap","runTest","testCase","Promise","resolve","setTimeout","Math","random","result","runAllTests","value","testCases","success","runSingleTest"],"sources":["/Users/rika/work/src/auto-test/src/components/TestGroup.vue"],"sourcesContent":["<template>\n  <div class=\"test-group\">\n    <h2 class=\"group-title\">{{ group.name }}</h2>\n    <div class=\"test-cases\">\n      <div\n          v-for=\"testCase in group.testCases\"\n          :key=\"testCase.id\"\n          class=\"test-case\"\n          :class=\"testCase.status\"\n          @click=\"runSingleTest(testCase)\"\n      >\n        <h3 class=\"test-name\">{{ testCase.name }}</h3>\n        <p class=\"test-status\">状态: {{ getStatusText(testCase.status) }}</p>\n        <p v-if=\"testCase.result\" class=\"test-result\">结果: {{ testCase.result }}</p>\n      </div>\n    </div>\n    <button @click=\"runAllTests\" :disabled=\"isRunning\" class=\"run-all-btn\">\n      运行所有测试\n    </button>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\n\nexport default {\n  name: 'TestGroup',\n  props: {\n    group: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const isRunning = ref(false);\n\n    const getStatusText = (status) => {\n      const statusMap = {\n        'idle': '未开始',\n        'running': '进行中',\n        'success': '成功',\n        'failure': '失败'\n      };\n      return statusMap[status] || status;\n    };\n\n    const runTest = async (testCase) => {\n      testCase.status = 'running';\n      // 模拟异步测试运行\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      testCase.status = Math.random() > 0.5 ? 'success' : 'failure';\n      testCase.result = testCase.status === 'success' ? '测试通过' : '测试失败';\n      return testCase.status === 'success';\n    };\n\n    const runAllTests = async () => {\n      isRunning.value = true;\n      for (let testCase of props.group.testCases) {\n        const success = await runTest(testCase);\n        if (!success) break;\n      }\n      isRunning.value = false;\n    };\n\n    const runSingleTest = async (testCase) => {\n      if (isRunning.value || testCase.status === 'running') {\n        return;\n      }\n      await runTest(testCase);\n    };\n\n    return {\n      isRunning,\n      getStatusText,\n      runAllTests,\n      runSingleTest\n    };\n  }\n};\n</script>\n\n<style scoped>\n.test-group {\n  background-color: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  padding: 20px;\n  margin: 20px 0;\n}\n\n.group-title {\n  color: #333;\n  margin-top: 0;\n  margin-bottom: 20px;\n  font-size: 1.5em;\n}\n\n.test-cases {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 15px;\n  margin-bottom: 20px;\n}\n\n.test-case {\n  background-color: #f9f9f9;\n  border-radius: 6px;\n  padding: 15px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.test-case:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.test-case.running {\n  background-color: #fff9c4;\n}\n\n.test-case.success {\n  background-color: #c8e6c9;\n}\n\n.test-case.failure {\n  background-color: #ffcdd2;\n}\n\n.test-name {\n  margin: 0 0 10px 0;\n  font-size: 1.1em;\n  color: #444;\n}\n\n.test-status, .test-result {\n  margin: 5px 0;\n  font-size: 0.9em;\n  color: #666;\n}\n\n.run-all-btn {\n  background-color: #4CAF50;\n  border: none;\n  color: white;\n  padding: 10px 20px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin-top: 10px;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n}\n\n.run-all-btn:hover {\n  background-color: #45a049;\n}\n\n.run-all-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n</style>"],"mappings":"AAuBA,SAASA,GAAE,QAAS,KAAK;AAEzB,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,KAAKA,CAACL,KAAK,EAAE;IACX,MAAMM,SAAQ,GAAIR,GAAG,CAAC,KAAK,CAAC;IAE5B,MAAMS,aAAY,GAAKC,MAAM,IAAK;MAChC,MAAMC,SAAQ,GAAI;QAChB,MAAM,EAAE,KAAK;QACb,SAAS,EAAE,KAAK;QAChB,SAAS,EAAE,IAAI;QACf,SAAS,EAAE;MACb,CAAC;MACD,OAAOA,SAAS,CAACD,MAAM,KAAKA,MAAM;IACpC,CAAC;IAED,MAAME,OAAM,GAAI,MAAOC,QAAQ,IAAK;MAClCA,QAAQ,CAACH,MAAK,GAAI,SAAS;MAC3B;MACA,MAAM,IAAII,OAAO,CAACC,OAAM,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MACvDF,QAAQ,CAACH,MAAK,GAAIO,IAAI,CAACC,MAAM,CAAC,IAAI,GAAE,GAAI,SAAQ,GAAI,SAAS;MAC7DL,QAAQ,CAACM,MAAK,GAAIN,QAAQ,CAACH,MAAK,KAAM,SAAQ,GAAI,MAAK,GAAI,MAAM;MACjE,OAAOG,QAAQ,CAACH,MAAK,KAAM,SAAS;IACtC,CAAC;IAED,MAAMU,WAAU,GAAI,MAAAA,CAAA,KAAY;MAC9BZ,SAAS,CAACa,KAAI,GAAI,IAAI;MACtB,KAAK,IAAIR,QAAO,IAAKX,KAAK,CAACC,KAAK,CAACmB,SAAS,EAAE;QAC1C,MAAMC,OAAM,GAAI,MAAMX,OAAO,CAACC,QAAQ,CAAC;QACvC,IAAI,CAACU,OAAO,EAAE;MAChB;MACAf,SAAS,CAACa,KAAI,GAAI,KAAK;IACzB,CAAC;IAED,MAAMG,aAAY,GAAI,MAAOX,QAAQ,IAAK;MACxC,IAAIL,SAAS,CAACa,KAAI,IAAKR,QAAQ,CAACH,MAAK,KAAM,SAAS,EAAE;QACpD;MACF;MACA,MAAME,OAAO,CAACC,QAAQ,CAAC;IACzB,CAAC;IAED,OAAO;MACLL,SAAS;MACTC,aAAa;MACbW,WAAW;MACXI;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}