{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'TestGroup',\n  data() {\n    return {\n      group: {\n        name: '拉流测试',\n        testCases: [{\n          name: '推流',\n          status: 'idle',\n          result: null\n        }, {\n          name: '拉流',\n          status: 'idle',\n          result: null\n        }, {\n          name: '拉流探测',\n          status: 'idle',\n          result: null\n        }, {\n          name: '断流',\n          status: 'idle',\n          result: null\n        }, {\n          name: '重新拉流',\n          status: 'idle',\n          result: null\n        }]\n      },\n      isRunning: false\n    };\n  },\n  methods: {\n    getStatusText(status) {\n      const statusMap = {\n        'idle': '未开始',\n        'running': '进行中',\n        'success': '成功',\n        'failure': '失败'\n      };\n      return statusMap[status] || status;\n    },\n    async runTest(testCase) {\n      testCase.status = 'running';\n      try {\n        const response = await axios.post('http://localhost:8080/runTest', {\n          testName: testCase.name\n        });\n        testCase.status = response.data.success ? 'success' : 'failure';\n        testCase.result = response.data.result;\n        return response.data.success;\n      } catch (error) {\n        testCase.status = 'failure';\n        testCase.result = error.message;\n        return false;\n      }\n    },\n    async runAllTests() {\n      this.isRunning = true;\n      for (let testCase of this.group.testCases) {\n        const success = await this.runTest(testCase);\n        if (!success) break;\n      }\n      this.isRunning = false;\n    },\n    async runSingleTest(index) {\n      if (this.isRunning || this.group.testCases[index].status === 'running') {\n        return;\n      }\n      await this.runTest(this.group.testCases[index]);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","group","testCases","status","result","isRunning","methods","getStatusText","statusMap","runTest","testCase","response","post","testName","success","error","message","runAllTests","runSingleTest","index"],"sources":["/Users/rika/work/src/auto-test/src/components/TestGroup.vue"],"sourcesContent":["<template>\n  <div class=\"test-group\">\n    <h2>{{ group.name }}</h2>\n    <div class=\"test-cases\">\n      <div \n        v-for=\"(testCase, index) in group.testCases\" \n        :key=\"index\" \n        class=\"test-case\"\n        :class=\"{ \n          'running': testCase.status === 'running',\n          'success': testCase.status === 'success',\n          'failure': testCase.status === 'failure'\n        }\"\n        @click=\"runSingleTest(index)\"\n      >\n        <h3>{{ testCase.name }}</h3>\n        <p>状态: {{ getStatusText(testCase.status) }}</p>\n        <p v-if=\"testCase.result\">结果: {{ testCase.result }}</p>\n      </div>\n    </div>\n    <button @click=\"runAllTests\" :disabled=\"isRunning\">运行所有测试</button>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'TestGroup',\n  data() {\n    return {\n      group: {\n        name: '拉流测试',\n        testCases: [\n          { name: '推流', status: 'idle', result: null },\n          { name: '拉流', status: 'idle', result: null },\n          { name: '拉流探测', status: 'idle', result: null },\n          { name: '断流', status: 'idle', result: null },\n          { name: '重新拉流', status: 'idle', result: null },\n        ]\n      },\n      isRunning: false\n    }\n  },\n  methods: {\n    getStatusText(status) {\n      const statusMap = {\n        'idle': '未开始',\n        'running': '进行中',\n        'success': '成功',\n        'failure': '失败'\n      };\n      return statusMap[status] || status;\n    },\n    async runTest(testCase) {\n      testCase.status = 'running';\n      try {\n        const response = await axios.post('http://localhost:8080/runTest', { testName: testCase.name });\n        testCase.status = response.data.success ? 'success' : 'failure';\n        testCase.result = response.data.result;\n        return response.data.success;\n      } catch (error) {\n        testCase.status = 'failure';\n        testCase.result = error.message;\n        return false;\n      }\n    },\n    async runAllTests() {\n      this.isRunning = true;\n      for (let testCase of this.group.testCases) {\n        const success = await this.runTest(testCase);\n        if (!success) break;\n      }\n      this.isRunning = false;\n    },\n    async runSingleTest(index) {\n      if (this.isRunning || this.group.testCases[index].status === 'running') {\n        return;\n      }\n      await this.runTest(this.group.testCases[index]);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.test-group {\n  margin: 20px;\n  padding: 20px;\n  border: 1px solid #ddd;\n}\n.test-cases {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n.test-case {\n  width: 200px;\n  padding: 10px;\n  border: 1px solid #eee;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n.test-case.running {\n  background-color: #f0f0f0;\n  cursor: not-allowed;\n}\n.test-case.success {\n  background-color: #e6ffe6;\n}\n.test-case.failure {\n  background-color: #ffe6e6;\n}\nbutton {\n  margin-top: 20px;\n  padding: 10px 20px;\n  font-size: 16px;\n}\n</style>\n"],"mappings":"AAyBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;QACLF,IAAI,EAAE,MAAM;QACZG,SAAS,EAAE,CACT;UAAEH,IAAI,EAAE,IAAI;UAAEI,MAAM,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAK,CAAC,EAC5C;UAAEL,IAAI,EAAE,IAAI;UAAEI,MAAM,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAK,CAAC,EAC5C;UAAEL,IAAI,EAAE,MAAM;UAAEI,MAAM,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAK,CAAC,EAC9C;UAAEL,IAAI,EAAE,IAAI;UAAEI,MAAM,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAK,CAAC,EAC5C;UAAEL,IAAI,EAAE,MAAM;UAAEI,MAAM,EAAE,MAAM;UAAEC,MAAM,EAAE;QAAK,CAAC;MAElD,CAAC;MACDC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,aAAaA,CAACJ,MAAM,EAAE;MACpB,MAAMK,SAAQ,GAAI;QAChB,MAAM,EAAE,KAAK;QACb,SAAS,EAAE,KAAK;QAChB,SAAS,EAAE,IAAI;QACf,SAAS,EAAE;MACb,CAAC;MACD,OAAOA,SAAS,CAACL,MAAM,KAAKA,MAAM;IACpC,CAAC;IACD,MAAMM,OAAOA,CAACC,QAAQ,EAAE;MACtBA,QAAQ,CAACP,MAAK,GAAI,SAAS;MAC3B,IAAI;QACF,MAAMQ,QAAO,GAAI,MAAMb,KAAK,CAACc,IAAI,CAAC,+BAA+B,EAAE;UAAEC,QAAQ,EAAEH,QAAQ,CAACX;QAAK,CAAC,CAAC;QAC/FW,QAAQ,CAACP,MAAK,GAAIQ,QAAQ,CAACX,IAAI,CAACc,OAAM,GAAI,SAAQ,GAAI,SAAS;QAC/DJ,QAAQ,CAACN,MAAK,GAAIO,QAAQ,CAACX,IAAI,CAACI,MAAM;QACtC,OAAOO,QAAQ,CAACX,IAAI,CAACc,OAAO;MAC9B,EAAE,OAAOC,KAAK,EAAE;QACdL,QAAQ,CAACP,MAAK,GAAI,SAAS;QAC3BO,QAAQ,CAACN,MAAK,GAAIW,KAAK,CAACC,OAAO;QAC/B,OAAO,KAAK;MACd;IACF,CAAC;IACD,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI,CAACZ,SAAQ,GAAI,IAAI;MACrB,KAAK,IAAIK,QAAO,IAAK,IAAI,CAACT,KAAK,CAACC,SAAS,EAAE;QACzC,MAAMY,OAAM,GAAI,MAAM,IAAI,CAACL,OAAO,CAACC,QAAQ,CAAC;QAC5C,IAAI,CAACI,OAAO,EAAE;MAChB;MACA,IAAI,CAACT,SAAQ,GAAI,KAAK;IACxB,CAAC;IACD,MAAMa,aAAaA,CAACC,KAAK,EAAE;MACzB,IAAI,IAAI,CAACd,SAAQ,IAAK,IAAI,CAACJ,KAAK,CAACC,SAAS,CAACiB,KAAK,CAAC,CAAChB,MAAK,KAAM,SAAS,EAAE;QACtE;MACF;MACA,MAAM,IAAI,CAACM,OAAO,CAAC,IAAI,CAACR,KAAK,CAACC,SAAS,CAACiB,KAAK,CAAC,CAAC;IACjD;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}