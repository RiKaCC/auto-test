{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, toDisplayString as _toDisplayString, vModelText as _vModelText, resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"AuroraLive Test\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"可用测试用例\", -1 /* HOISTED */);\nconst _hoisted_5 = [\"value\"];\nconst _hoisted_6 = {\n  class: \"test-group-input\"\n};\nconst _hoisted_7 = [\"disabled\"];\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"hr\", null, null, -1 /* HOISTED */);\nconst _hoisted_9 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TestGroup = _resolveComponent(\"TestGroup\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, $setup.testGroupsLoaded ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_hoisted_4, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.testCasePool, testCase => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: testCase.id,\n      class: \"test-case-item\"\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      value: testCase,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.selectedTestCases = $event)\n    }, null, 8 /* PROPS */, _hoisted_5), [[_vModelCheckbox, $setup.selectedTestCases]]), _createElementVNode(\"span\", null, _toDisplayString(testCase.name), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", _hoisted_6, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.newTestGroupName = $event),\n    placeholder: \"输入测试组名称\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newTestGroupName]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.createTestGroup && $setup.createTestGroup(...args)),\n    disabled: $setup.selectedTestCases.length === 0 || !$setup.newTestGroupName\n  }, \"创建测试组\", 8 /* PROPS */, _hoisted_7)]), _hoisted_8, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.testGroups, group => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: group.id\n    }, [_createVNode(_component_TestGroup, {\n      group: group,\n      sharedState: $setup.sharedState\n    }, null, 8 /* PROPS */, [\"group\", \"sharedState\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_9, \" 加载中... \"))]);\n}","map":{"version":3,"names":["id","_createElementVNode","key","class","_createElementBlock","_hoisted_1","_hoisted_2","$setup","testGroupsLoaded","_hoisted_3","_hoisted_4","_Fragment","_renderList","testCasePool","testCase","type","value","_cache","$event","selectedTestCases","_hoisted_5","_toDisplayString","name","_hoisted_6","newTestGroupName","placeholder","onClick","args","createTestGroup","disabled","length","_hoisted_7","_hoisted_8","testGroups","group","_createVNode","_component_TestGroup","sharedState","_hoisted_9"],"sources":["/Users/rika/work/src/auto-test/src/App.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n        <h1>AuroraLive Test</h1>\n        <div v-if=\"testGroupsLoaded\">\n            <h2>可用测试用例</h2>\n            <div v-for=\"testCase in testCasePool\" :key=\"testCase.id\" class=\"test-case-item\">\n                <input type=\"checkbox\" :value=\"testCase\" v-model=\"selectedTestCases\">\n                <span>{{ testCase.name }}</span>\n            </div>\n            <div class=\"test-group-input\">\n                <input v-model=\"newTestGroupName\" placeholder=\"输入测试组名称\">\n                <button @click=\"createTestGroup\" :disabled=\"selectedTestCases.length === 0 || !newTestGroupName\">创建测试组</button>\n            </div>\n            <hr>\n            <div v-for=\"group in testGroups\" :key=\"group.id\">\n                <TestGroup :group=\"group\" :sharedState=\"sharedState\"/>\n            </div>\n        </div>\n        <div v-else>\n            加载中...\n        </div>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport TestGroup from './components/TestGroup.vue';\n\nexport default {\n    name: 'App',\n    components: {\n        TestGroup\n    },\n    setup() {\n        const testCasePool = ref([]);\n        const selectedTestCases = ref([]);\n        const testGroups = ref([]);\n        const testGroupsLoaded = ref(false);\n        const newTestGroupName = ref('');\n        const sharedState = ref({});  // 初始化 sharedState\n\n        const loadTestCases = async () => {\n            // 模拟异步加载数据\n            await new Promise(resolve => setTimeout(resolve, 1000));  // 模拟延迟\n            testCasePool.value = [\n                { id: 1, name: \"创建流\", status: \"idle\", testFunction: createStream },\n                { id: 2, name: \"推流\", status: \"idle\", testFunction: publish },\n                { id: 3, name: \"Pre拉流\", status: \"idle\", testFunction: prePull },\n                { id: 4, name: \"拉流\", status: \"idle\", testFunction: pull },\n                { id: 5, name: \"断流\", status: \"idle\", testFunction: unPublish },\n                { id: 6, name: \"End拉流\", status: \"idle\", testFunction: endPull }\n            ];\n            testGroupsLoaded.value = true;\n        };\n\n        const createTestGroup = () => {\n            const newGroupId = testGroups.value.length + 1;\n            testGroups.value.push({\n                id: newGroupId,\n                name: newTestGroupName.value || `测试组 ${newGroupId}`,\n                testCases: selectedTestCases.value.map(tc => ({ ...tc }))\n            });\n            selectedTestCases.value = [];\n            newTestGroupName.value = '';\n        };\n\n        const createStream = async (state) => {\n            try {\n                const response = await axios.post('/api/stream/create');\n                if (response.status === 201) {\n                    state.streamData = response.data;  // 将响应数据保存到 sharedState\n                    return 'success';\n                }\n                return 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        const publish = async (state) => {\n            try {\n                const response = await axios.post('/api/stream/publish', {\n                    streamId: state.streamData.id  // 从 sharedState 中获取 streamId\n                });\n                return response.status === 200 ? 'success' : 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        const prePull = async (state) => {\n            try {\n                const response = await axios.get('/api/stream/prepull', {\n                    params: { streamId: state.streamData.id }  // 从 sharedState 中获取 streamId\n                });\n                return response.status === 200 ? 'success' : 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        const pull = async (state) => {\n            try {\n                const response = await axios.get('/api/stream/pull', {\n                    params: { streamId: state.streamData.id }  // 从 sharedState 中获取 streamId\n                });\n                return response.status === 200 ? 'success' : 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        const unPublish = async (state) => {\n            try {\n                const response = await axios.post('/api/stream/unpublish', {\n                    streamId: state.streamData.id  // 从 sharedState 中获取 streamId\n                });\n                return response.status === 200 ? 'success' : 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        const endPull = async (state) => {\n            try {\n                const response = await axios.post('/api/stream/endpull', {\n                    streamId: state.streamData.id  // 从 sharedState 中获取 streamId\n                });\n                return response.status === 200 ? 'success' : 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        onMounted(loadTestCases);\n\n        return {\n            testCasePool,\n            selectedTestCases,\n            testGroups,\n            testGroupsLoaded,\n            newTestGroupName,\n            createTestGroup,\n            sharedState  // 确保返回 sharedState\n        };\n    }\n};\n</script>\n\n<style>\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f0f2f5;\n    margin: 0;\n    padding: 0;\n}\n\n#app {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nh1, h2 {\n    color: #333;\n    text-align: center;\n}\n\n.test-case-item {\n    display: flex;\n    align-items: center;\n    margin: 5px 0;\n}\n\n.test-case-item input {\n    margin-right: 10px;\n}\n\n.test-group-input {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 20px 0;\n}\n\n.test-group-input input {\n    padding: 10px;\n    font-size: 16px;\n    margin-right: 10px;\n    width: 300px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n\nbutton {\n    padding: 10px 20px;\n    border: none;\n    background-color: #4CAF50;\n    color: white;\n    cursor: pointer;\n    border-radius: 4px;\n    transition: background-color 0.3s ease;\n}\n\nbutton:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n}\n</style>"],"mappings":";;EACSA,EAAE,EAAC;AAAK;gCACTC,mBAAA,CAAwB,YAApB,iBAAe;;EAF3BC,GAAA;AAAA;gCAIYD,mBAAA,CAAe,YAAX,QAAM;mBAJtB;;EASiBE,KAAK,EAAC;AAAkB;mBATzC;gCAaYF,mBAAA,CAAI;;EAbhBC,GAAA;AAAA;;;uBACIE,mBAAA,CAoBM,OApBNC,UAoBM,GAnBFC,UAAwB,EACbC,MAAA,CAAAC,gBAAgB,I,cAA3BJ,mBAAA,CAcM,OAjBdK,UAAA,GAIYC,UAAe,G,kBACfN,mBAAA,CAGMO,SAAA,QARlBC,WAAA,CAKoCL,MAAA,CAAAM,YAAY,EAAxBC,QAAQ;yBAApBV,mBAAA,CAGM;MAHiCF,GAAG,EAAEY,QAAQ,CAACd,EAAE;MAAEG,KAAK,EAAC;wBAC3DF,mBAAA,CAAqE;MAA9Dc,IAAI,EAAC,UAAU;MAAEC,KAAK,EAAEF,QAAQ;MANvD,uBAAAG,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAMkEX,MAAA,CAAAY,iBAAiB,GAAAD,MAAA;4BANnFE,UAAA,I,kBAMkEb,MAAA,CAAAY,iBAAiB,E,GACnElB,mBAAA,CAAgC,cAAAoB,gBAAA,CAAvBP,QAAQ,CAACQ,IAAI,iB;kCAE1BrB,mBAAA,CAGM,OAHNsB,UAGM,G,gBAFFtB,mBAAA,CAAwD;IAVxE,uBAAAgB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAUgCX,MAAA,CAAAiB,gBAAgB,GAAAN,MAAA;IAAEO,WAAW,EAAC;iDAA9BlB,MAAA,CAAAiB,gBAAgB,E,GAChCvB,mBAAA,CAA+G;IAAtGyB,OAAK,EAAAT,MAAA,QAAAA,MAAA,UAAAU,IAAA,KAAEpB,MAAA,CAAAqB,eAAA,IAAArB,MAAA,CAAAqB,eAAA,IAAAD,IAAA,CAAe;IAAGE,QAAQ,EAAEtB,MAAA,CAAAY,iBAAiB,CAACW,MAAM,WAAWvB,MAAA,CAAAiB;KAAkB,OAAK,iBAXtHO,UAAA,E,GAaYC,UAAI,G,kBACJ5B,mBAAA,CAEMO,SAAA,QAhBlBC,WAAA,CAciCL,MAAA,CAAA0B,UAAU,EAAnBC,KAAK;yBAAjB9B,mBAAA,CAEM;MAF4BF,GAAG,EAAEgC,KAAK,CAAClC;QACzCmC,YAAA,CAAsDC,oBAAA;MAA1CF,KAAK,EAAEA,KAAK;MAAGG,WAAW,EAAE9B,MAAA,CAAA8B;;qDAGhDjC,mBAAA,CAEM,OApBdkC,UAAA,EAkBoB,UAEZ,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}