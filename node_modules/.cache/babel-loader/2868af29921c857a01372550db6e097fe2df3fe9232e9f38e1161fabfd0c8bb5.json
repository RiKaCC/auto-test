{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-b87d12e6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"test-group\"\n};\nconst _hoisted_2 = {\n  class: \"group-title\"\n};\nconst _hoisted_3 = {\n  class: \"test-cases\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"test-name\"\n};\nconst _hoisted_6 = {\n  class: \"test-status\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"test-result\"\n};\nconst _hoisted_8 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", _hoisted_2, _toDisplayString(_ctx.group.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.group.testCases, (testCase, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"test-case\", testCase.status]),\n      onClick: $event => _ctx.runSingleTest(index)\n    }, [_createElementVNode(\"h3\", _hoisted_5, _toDisplayString(testCase.name), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_6, _toDisplayString(_ctx.getStatusText(testCase.status)), 1 /* TEXT */), testCase.result ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, _toDisplayString(testCase.result), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.runAllTests && _ctx.runAllTests(...args)),\n    disabled: _ctx.isRunning,\n    class: \"run-all-btn\"\n  }, \"运行所有测试\", 8 /* PROPS */, _hoisted_8)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","_ctx","group","name","_hoisted_3","_Fragment","_renderList","testCases","testCase","index","_normalizeClass","status","onClick","$event","runSingleTest","_hoisted_5","_hoisted_6","getStatusText","result","_hoisted_7","_createCommentVNode","_hoisted_4","_cache","args","runAllTests","disabled","isRunning","_hoisted_8"],"sources":["/Users/rika/work/src/auto-test/src/components/TestGroup.vue"],"sourcesContent":["<template>\n  <div class=\"test-group\">\n    <h2 class=\"group-title\">{{ group.name }}</h2>\n    <div class=\"test-cases\">\n      <div\n          v-for=\"(testCase, index) in group.testCases\"\n          :key=\"index\"\n          class=\"test-case\"\n          :class=\"testCase.status\"\n          @click=\"runSingleTest(index)\"\n      >\n        <h3 class=\"test-name\">{{ testCase.name }}</h3>\n        <p class=\"test-status\">{{ getStatusText(testCase.status) }}</p>\n        <p v-if=\"testCase.result\" class=\"test-result\">{{ testCase.result }}</p>\n      </div>\n    </div>\n    <button @click=\"runAllTests\" :disabled=\"isRunning\" class=\"run-all-btn\">运行所有测试</button>\n  </div>\n</template>\n\n<script>\n// script 部分保持不变\n</script>\n\n<style scoped>\n.test-group {\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  padding: 20px;\n  width: calc(50% - 10px);\n  box-sizing: border-box;\n}\n\n.group-title {\n  color: #333;\n  margin-top: 0;\n  margin-bottom: 20px;\n  font-size: 1.5em;\n}\n\n.test-cases {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 15px;\n  margin-bottom: 20px;\n}\n\n.test-case {\n  background-color: #f9f9f9;\n  border-radius: 6px;\n  padding: 15px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.test-case:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.test-case.running {\n  background-color: #e0e0e0;\n  cursor: not-allowed;\n}\n\n.test-case.success {\n  background-color: #e6ffe6;\n}\n\n.test-case.failure {\n  background-color: #ffe6e6;\n}\n\n.test-name {\n  margin: 0 0 10px 0;\n  font-size: 1.1em;\n  color: #444;\n}\n\n.test-status {\n  margin: 0;\n  font-size: 0.9em;\n  color: #666;\n}\n\n.test-result {\n  margin: 10px 0 0 0;\n  font-size: 0.9em;\n  color: #666;\n}\n\n.run-all-btn {\n  background-color: #4CAF50;\n  border: none;\n  color: white;\n  padding: 10px 20px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  transition-duration: 0.4s;\n  cursor: pointer;\n  border-radius: 4px;\n}\n\n.run-all-btn:hover {\n  background-color: #45a049;\n}\n\n.run-all-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n</style>"],"mappings":";;;EACOA,KAAK,EAAC;AAAY;;EACjBA,KAAK,EAAC;AAAa;;EAClBA,KAAK,EAAC;AAAY;mBAH3B;;EAWYA,KAAK,EAAC;AAAW;;EAClBA,KAAK,EAAC;AAAa;;EAZ9BC,GAAA;EAakCD,KAAK,EAAC;;mBAbxC;;uBACEE,mBAAA,CAgBM,OAhBNC,UAgBM,GAfJC,mBAAA,CAA6C,MAA7CC,UAA6C,EAAAC,gBAAA,CAAlBC,IAAA,CAAAC,KAAK,CAACC,IAAI,kBACrCL,mBAAA,CAYM,OAZNM,UAYM,I,kBAXJR,mBAAA,CAUMS,SAAA,QAdZC,WAAA,CAKsCL,IAAA,CAAAC,KAAK,CAACK,SAAS,EALrD,CAKkBC,QAAQ,EAAEC,KAAK;yBAD3Bb,mBAAA,CAUM;MARDD,GAAG,EAAEc,KAAK;MACXf,KAAK,EAPfgB,eAAA,EAOgB,WAAW,EACTF,QAAQ,CAACG,MAAM;MACtBC,OAAK,EAAAC,MAAA,IAAEZ,IAAA,CAAAa,aAAa,CAACL,KAAK;QAE7BX,mBAAA,CAA8C,MAA9CiB,UAA8C,EAAAf,gBAAA,CAArBQ,QAAQ,CAACL,IAAI,kBACtCL,mBAAA,CAA+D,KAA/DkB,UAA+D,EAAAhB,gBAAA,CAArCC,IAAA,CAAAgB,aAAa,CAACT,QAAQ,CAACG,MAAM,mBAC9CH,QAAQ,CAACU,MAAM,I,cAAxBtB,mBAAA,CAAuE,KAAvEuB,UAAuE,EAAAnB,gBAAA,CAAtBQ,QAAQ,CAACU,MAAM,oBAbxEE,mBAAA,e,yBAAAC,UAAA;oCAgBIvB,mBAAA,CAAsF;IAA7Ec,OAAK,EAAAU,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEtB,IAAA,CAAAuB,WAAA,IAAAvB,IAAA,CAAAuB,WAAA,IAAAD,IAAA,CAAW;IAAGE,QAAQ,EAAExB,IAAA,CAAAyB,SAAS;IAAEhC,KAAK,EAAC;KAAc,QAAM,iBAhBjFiC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}