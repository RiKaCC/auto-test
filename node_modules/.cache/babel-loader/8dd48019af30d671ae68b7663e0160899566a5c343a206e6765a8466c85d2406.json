{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport TestGroup from './components/TestGroup.vue';\nexport default {\n  name: 'App',\n  components: {\n    TestGroup\n  },\n  setup() {\n    const testCasePool = ref([]);\n    const selectedTestCases = ref([]);\n    const testGroups = ref([]);\n    const testGroupsLoaded = ref(false);\n    const newTestGroupName = ref('');\n    const sharedState = ref({}); // 初始化 sharedState\n\n    const loadTestCases = async () => {\n      // 模拟异步加载数据\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 模拟延迟\n      testCasePool.value = [{\n        id: 1,\n        name: \"创建流\",\n        status: \"idle\",\n        testFunction: createStream\n      }, {\n        id: 2,\n        name: \"推流\",\n        status: \"idle\",\n        testFunction: publish\n      }, {\n        id: 3,\n        name: \"Pre拉流\",\n        status: \"idle\",\n        testFunction: prePull\n      }, {\n        id: 4,\n        name: \"拉流\",\n        status: \"idle\",\n        testFunction: pull\n      }, {\n        id: 5,\n        name: \"断流\",\n        status: \"idle\",\n        testFunction: unPublish\n      }, {\n        id: 6,\n        name: \"End拉流\",\n        status: \"idle\",\n        testFunction: endPull\n      }];\n      testGroupsLoaded.value = true;\n    };\n    const createTestGroup = () => {\n      const newGroupId = testGroups.value.length + 1;\n      testGroups.value.push({\n        id: newGroupId,\n        name: newTestGroupName.value || `测试组 ${newGroupId}`,\n        testCases: selectedTestCases.value.map(tc => ({\n          ...tc\n        }))\n      });\n      selectedTestCases.value = [];\n      newTestGroupName.value = '';\n    };\n    const createStream = async state => {\n      try {\n        const response = await axios.post('/api/stream/create');\n        if (response.status === 201) {\n          state.streamData = response.data; // 将响应数据保存到 sharedState\n          return 'success';\n        }\n        return 'failure';\n      } catch {\n        return 'failure';\n      }\n    };\n    const publish = async state => {\n      try {\n        const response = await axios.post('/api/stream/publish', {\n          streamId: state.streamData.id // 从 sharedState 中获取 streamId\n        });\n        return response.status === 200 ? 'success' : 'failure';\n      } catch {\n        return 'failure';\n      }\n    };\n    const prePull = async state => {\n      try {\n        const response = await axios.get('/api/stream/prepull', {\n          params: {\n            streamId: state.streamData.id\n          } // 从 sharedState 中获取 streamId\n        });\n        return response.status === 200 ? 'success' : 'failure';\n      } catch {\n        return 'failure';\n      }\n    };\n    const pull = async state => {\n      try {\n        const response = await axios.get('/api/stream/pull', {\n          params: {\n            streamId: state.streamData.id\n          } // 从 sharedState 中获取 streamId\n        });\n        return response.status === 200 ? 'success' : 'failure';\n      } catch {\n        return 'failure';\n      }\n    };\n    const unPublish = async state => {\n      try {\n        const response = await axios.post('/api/stream/unpublish', {\n          streamId: state.streamData.id // 从 sharedState 中获取 streamId\n        });\n        return response.status === 200 ? 'success' : 'failure';\n      } catch {\n        return 'failure';\n      }\n    };\n    const endPull = async state => {\n      try {\n        const response = await axios.post('/api/stream/endpull', {\n          streamId: state.streamData.id // 从 sharedState 中获取 streamId\n        });\n        return response.status === 200 ? 'success' : 'failure';\n      } catch {\n        return 'failure';\n      }\n    };\n    onMounted(loadTestCases);\n    return {\n      testCasePool,\n      selectedTestCases,\n      testGroups,\n      testGroupsLoaded,\n      newTestGroupName,\n      createTestGroup,\n      sharedState // 确保返回 sharedState\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","TestGroup","name","components","setup","testCasePool","selectedTestCases","testGroups","testGroupsLoaded","newTestGroupName","sharedState","loadTestCases","Promise","resolve","setTimeout","value","id","status","testFunction","createStream","publish","prePull","pull","unPublish","endPull","createTestGroup","newGroupId","length","push","testCases","map","tc","state","response","post","streamData","data","streamId","get","params"],"sources":["/Users/rika/work/src/auto-test/src/App.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n        <h1>AuroraLive Test</h1>\n        <div v-if=\"testGroupsLoaded\">\n            <h2>可用测试用例</h2>\n            <div v-for=\"testCase in testCasePool\" :key=\"testCase.id\" class=\"test-case-item\">\n                <input type=\"checkbox\" :value=\"testCase\" v-model=\"selectedTestCases\">\n                <span>{{ testCase.name }}</span>\n            </div>\n            <div class=\"test-group-input\">\n                <input v-model=\"newTestGroupName\" placeholder=\"输入测试组名称\">\n                <button @click=\"createTestGroup\" :disabled=\"selectedTestCases.length === 0 || !newTestGroupName\">创建测试组</button>\n            </div>\n            <hr>\n            <div v-for=\"group in testGroups\" :key=\"group.id\">\n                <TestGroup :group=\"group\" :sharedState=\"sharedState\"/>\n            </div>\n        </div>\n        <div v-else>\n            加载中...\n        </div>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport TestGroup from './components/TestGroup.vue';\n\nexport default {\n    name: 'App',\n    components: {\n        TestGroup\n    },\n    setup() {\n        const testCasePool = ref([]);\n        const selectedTestCases = ref([]);\n        const testGroups = ref([]);\n        const testGroupsLoaded = ref(false);\n        const newTestGroupName = ref('');\n        const sharedState = ref({});  // 初始化 sharedState\n\n        const loadTestCases = async () => {\n            // 模拟异步加载数据\n            await new Promise(resolve => setTimeout(resolve, 1000));  // 模拟延迟\n            testCasePool.value = [\n                { id: 1, name: \"创建流\", status: \"idle\", testFunction: createStream },\n                { id: 2, name: \"推流\", status: \"idle\", testFunction: publish },\n                { id: 3, name: \"Pre拉流\", status: \"idle\", testFunction: prePull },\n                { id: 4, name: \"拉流\", status: \"idle\", testFunction: pull },\n                { id: 5, name: \"断流\", status: \"idle\", testFunction: unPublish },\n                { id: 6, name: \"End拉流\", status: \"idle\", testFunction: endPull }\n            ];\n            testGroupsLoaded.value = true;\n        };\n\n        const createTestGroup = () => {\n            const newGroupId = testGroups.value.length + 1;\n            testGroups.value.push({\n                id: newGroupId,\n                name: newTestGroupName.value || `测试组 ${newGroupId}`,\n                testCases: selectedTestCases.value.map(tc => ({ ...tc }))\n            });\n            selectedTestCases.value = [];\n            newTestGroupName.value = '';\n        };\n\n        const createStream = async (state) => {\n            try {\n                const response = await axios.post('/api/stream/create');\n                if (response.status === 201) {\n                    state.streamData = response.data;  // 将响应数据保存到 sharedState\n                    return 'success';\n                }\n                return 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        const publish = async (state) => {\n            try {\n                const response = await axios.post('/api/stream/publish', {\n                    streamId: state.streamData.id  // 从 sharedState 中获取 streamId\n                });\n                return response.status === 200 ? 'success' : 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        const prePull = async (state) => {\n            try {\n                const response = await axios.get('/api/stream/prepull', {\n                    params: { streamId: state.streamData.id }  // 从 sharedState 中获取 streamId\n                });\n                return response.status === 200 ? 'success' : 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        const pull = async (state) => {\n            try {\n                const response = await axios.get('/api/stream/pull', {\n                    params: { streamId: state.streamData.id }  // 从 sharedState 中获取 streamId\n                });\n                return response.status === 200 ? 'success' : 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        const unPublish = async (state) => {\n            try {\n                const response = await axios.post('/api/stream/unpublish', {\n                    streamId: state.streamData.id  // 从 sharedState 中获取 streamId\n                });\n                return response.status === 200 ? 'success' : 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        const endPull = async (state) => {\n            try {\n                const response = await axios.post('/api/stream/endpull', {\n                    streamId: state.streamData.id  // 从 sharedState 中获取 streamId\n                });\n                return response.status === 200 ? 'success' : 'failure';\n            } catch {\n                return 'failure';\n            }\n        };\n\n        onMounted(loadTestCases);\n\n        return {\n            testCasePool,\n            selectedTestCases,\n            testGroups,\n            testGroupsLoaded,\n            newTestGroupName,\n            createTestGroup,\n            sharedState  // 确保返回 sharedState\n        };\n    }\n};\n</script>\n\n<style>\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f0f2f5;\n    margin: 0;\n    padding: 0;\n}\n\n#app {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nh1, h2 {\n    color: #333;\n    text-align: center;\n}\n\n.test-case-item {\n    display: flex;\n    align-items: center;\n    margin: 5px 0;\n}\n\n.test-case-item input {\n    margin-right: 10px;\n}\n\n.test-group-input {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 20px 0;\n}\n\n.test-group-input input {\n    padding: 10px;\n    font-size: 16px;\n    margin-right: 10px;\n    width: 300px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n\nbutton {\n    padding: 10px 20px;\n    border: none;\n    background-color: #4CAF50;\n    color: white;\n    cursor: pointer;\n    border-radius: 4px;\n    transition: background-color 0.3s ease;\n}\n\nbutton:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n}\n</style>"],"mappings":";AAyBA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,SAAQ,MAAO,4BAA4B;AAElD,eAAe;EACXC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACRF;EACJ,CAAC;EACDG,KAAKA,CAAA,EAAG;IACJ,MAAMC,YAAW,GAAIP,GAAG,CAAC,EAAE,CAAC;IAC5B,MAAMQ,iBAAgB,GAAIR,GAAG,CAAC,EAAE,CAAC;IACjC,MAAMS,UAAS,GAAIT,GAAG,CAAC,EAAE,CAAC;IAC1B,MAAMU,gBAAe,GAAIV,GAAG,CAAC,KAAK,CAAC;IACnC,MAAMW,gBAAe,GAAIX,GAAG,CAAC,EAAE,CAAC;IAChC,MAAMY,WAAU,GAAIZ,GAAG,CAAC,CAAC,CAAC,CAAC,EAAG;;IAE9B,MAAMa,aAAY,GAAI,MAAAA,CAAA,KAAY;MAC9B;MACA,MAAM,IAAIC,OAAO,CAACC,OAAM,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC,EAAG;MAC1DR,YAAY,CAACU,KAAI,GAAI,CACjB;QAAEC,EAAE,EAAE,CAAC;QAAEd,IAAI,EAAE,KAAK;QAAEe,MAAM,EAAE,MAAM;QAAEC,YAAY,EAAEC;MAAa,CAAC,EAClE;QAAEH,EAAE,EAAE,CAAC;QAAEd,IAAI,EAAE,IAAI;QAAEe,MAAM,EAAE,MAAM;QAAEC,YAAY,EAAEE;MAAQ,CAAC,EAC5D;QAAEJ,EAAE,EAAE,CAAC;QAAEd,IAAI,EAAE,OAAO;QAAEe,MAAM,EAAE,MAAM;QAAEC,YAAY,EAAEG;MAAQ,CAAC,EAC/D;QAAEL,EAAE,EAAE,CAAC;QAAEd,IAAI,EAAE,IAAI;QAAEe,MAAM,EAAE,MAAM;QAAEC,YAAY,EAAEI;MAAK,CAAC,EACzD;QAAEN,EAAE,EAAE,CAAC;QAAEd,IAAI,EAAE,IAAI;QAAEe,MAAM,EAAE,MAAM;QAAEC,YAAY,EAAEK;MAAU,CAAC,EAC9D;QAAEP,EAAE,EAAE,CAAC;QAAEd,IAAI,EAAE,OAAO;QAAEe,MAAM,EAAE,MAAM;QAAEC,YAAY,EAAEM;MAAQ,EACjE;MACDhB,gBAAgB,CAACO,KAAI,GAAI,IAAI;IACjC,CAAC;IAED,MAAMU,eAAc,GAAIA,CAAA,KAAM;MAC1B,MAAMC,UAAS,GAAInB,UAAU,CAACQ,KAAK,CAACY,MAAK,GAAI,CAAC;MAC9CpB,UAAU,CAACQ,KAAK,CAACa,IAAI,CAAC;QAClBZ,EAAE,EAAEU,UAAU;QACdxB,IAAI,EAAEO,gBAAgB,CAACM,KAAI,IAAK,OAAOW,UAAU,EAAE;QACnDG,SAAS,EAAEvB,iBAAiB,CAACS,KAAK,CAACe,GAAG,CAACC,EAAC,KAAM;UAAE,GAAGA;QAAG,CAAC,CAAC;MAC5D,CAAC,CAAC;MACFzB,iBAAiB,CAACS,KAAI,GAAI,EAAE;MAC5BN,gBAAgB,CAACM,KAAI,GAAI,EAAE;IAC/B,CAAC;IAED,MAAMI,YAAW,GAAI,MAAOa,KAAK,IAAK;MAClC,IAAI;QACA,MAAMC,QAAO,GAAI,MAAMjC,KAAK,CAACkC,IAAI,CAAC,oBAAoB,CAAC;QACvD,IAAID,QAAQ,CAAChB,MAAK,KAAM,GAAG,EAAE;UACzBe,KAAK,CAACG,UAAS,GAAIF,QAAQ,CAACG,IAAI,EAAG;UACnC,OAAO,SAAS;QACpB;QACA,OAAO,SAAS;MACpB,EAAE,MAAM;QACJ,OAAO,SAAS;MACpB;IACJ,CAAC;IAED,MAAMhB,OAAM,GAAI,MAAOY,KAAK,IAAK;MAC7B,IAAI;QACA,MAAMC,QAAO,GAAI,MAAMjC,KAAK,CAACkC,IAAI,CAAC,qBAAqB,EAAE;UACrDG,QAAQ,EAAEL,KAAK,CAACG,UAAU,CAACnB,EAAC,CAAG;QACnC,CAAC,CAAC;QACF,OAAOiB,QAAQ,CAAChB,MAAK,KAAM,GAAE,GAAI,SAAQ,GAAI,SAAS;MAC1D,EAAE,MAAM;QACJ,OAAO,SAAS;MACpB;IACJ,CAAC;IAED,MAAMI,OAAM,GAAI,MAAOW,KAAK,IAAK;MAC7B,IAAI;QACA,MAAMC,QAAO,GAAI,MAAMjC,KAAK,CAACsC,GAAG,CAAC,qBAAqB,EAAE;UACpDC,MAAM,EAAE;YAAEF,QAAQ,EAAEL,KAAK,CAACG,UAAU,CAACnB;UAAG,EAAG;QAC/C,CAAC,CAAC;QACF,OAAOiB,QAAQ,CAAChB,MAAK,KAAM,GAAE,GAAI,SAAQ,GAAI,SAAS;MAC1D,EAAE,MAAM;QACJ,OAAO,SAAS;MACpB;IACJ,CAAC;IAED,MAAMK,IAAG,GAAI,MAAOU,KAAK,IAAK;MAC1B,IAAI;QACA,MAAMC,QAAO,GAAI,MAAMjC,KAAK,CAACsC,GAAG,CAAC,kBAAkB,EAAE;UACjDC,MAAM,EAAE;YAAEF,QAAQ,EAAEL,KAAK,CAACG,UAAU,CAACnB;UAAG,EAAG;QAC/C,CAAC,CAAC;QACF,OAAOiB,QAAQ,CAAChB,MAAK,KAAM,GAAE,GAAI,SAAQ,GAAI,SAAS;MAC1D,EAAE,MAAM;QACJ,OAAO,SAAS;MACpB;IACJ,CAAC;IAED,MAAMM,SAAQ,GAAI,MAAOS,KAAK,IAAK;MAC/B,IAAI;QACA,MAAMC,QAAO,GAAI,MAAMjC,KAAK,CAACkC,IAAI,CAAC,uBAAuB,EAAE;UACvDG,QAAQ,EAAEL,KAAK,CAACG,UAAU,CAACnB,EAAC,CAAG;QACnC,CAAC,CAAC;QACF,OAAOiB,QAAQ,CAAChB,MAAK,KAAM,GAAE,GAAI,SAAQ,GAAI,SAAS;MAC1D,EAAE,MAAM;QACJ,OAAO,SAAS;MACpB;IACJ,CAAC;IAED,MAAMO,OAAM,GAAI,MAAOQ,KAAK,IAAK;MAC7B,IAAI;QACA,MAAMC,QAAO,GAAI,MAAMjC,KAAK,CAACkC,IAAI,CAAC,qBAAqB,EAAE;UACrDG,QAAQ,EAAEL,KAAK,CAACG,UAAU,CAACnB,EAAC,CAAG;QACnC,CAAC,CAAC;QACF,OAAOiB,QAAQ,CAAChB,MAAK,KAAM,GAAE,GAAI,SAAQ,GAAI,SAAS;MAC1D,EAAE,MAAM;QACJ,OAAO,SAAS;MACpB;IACJ,CAAC;IAEDlB,SAAS,CAACY,aAAa,CAAC;IAExB,OAAO;MACHN,YAAY;MACZC,iBAAiB;MACjBC,UAAU;MACVC,gBAAgB;MAChBC,gBAAgB;MAChBgB,eAAe;MACff,WAAU,CAAG;IACjB,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}