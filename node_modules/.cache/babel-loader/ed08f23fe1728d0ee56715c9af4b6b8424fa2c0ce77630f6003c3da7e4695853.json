{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-b87d12e6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"test-group\"\n};\nconst _hoisted_2 = {\n  class: \"test-cases\"\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, _toDisplayString($props.group.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.group.testCases, (testCase, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"test-case\", {\n        'running': testCase.status === 'running',\n        'success': testCase.status === 'success',\n        'failure': testCase.status === 'failure'\n      }]),\n      onClick: $event => $options.runSingleTest(index)\n    }, [_createElementVNode(\"h3\", null, _toDisplayString(testCase.name), 1 /* TEXT */), _createElementVNode(\"p\", null, \"状态: \" + _toDisplayString($options.getStatusText(testCase.status)), 1 /* TEXT */), testCase.result ? (_openBlock(), _createElementBlock(\"p\", _hoisted_4, \"结果: \" + _toDisplayString(testCase.result), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.runAllTests && $options.runAllTests(...args)),\n    disabled: $data.isRunning\n  }, \"运行所有测试\", 8 /* PROPS */, _hoisted_5)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","$props","group","name","_hoisted_2","_Fragment","_renderList","testCases","testCase","index","_normalizeClass","status","onClick","$event","$options","runSingleTest","getStatusText","result","_hoisted_4","_createCommentVNode","_hoisted_3","_cache","args","runAllTests","disabled","$data","isRunning","_hoisted_5"],"sources":["/Users/rika/work/src/auto-test/src/components/TestGroup.vue"],"sourcesContent":["<template>\n  <div class=\"test-group\">\n    <h2>{{ group.name }}</h2>\n    <div class=\"test-cases\">\n      <div\n          v-for=\"(testCase, index) in group.testCases\"\n          :key=\"index\"\n          class=\"test-case\"\n          :class=\"{\n          'running': testCase.status === 'running',\n          'success': testCase.status === 'success',\n          'failure': testCase.status === 'failure'\n        }\"\n          @click=\"runSingleTest(index)\"\n      >\n        <h3>{{ testCase.name }}</h3>\n        <p>状态: {{ getStatusText(testCase.status) }}</p>\n        <p v-if=\"testCase.result\">结果: {{ testCase.result }}</p>\n      </div>\n    </div>\n    <button @click=\"runAllTests\" :disabled=\"isRunning\">运行所有测试</button>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'TestGroup',\n  props: {\n    group: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      isRunning: false\n    }\n  },\n  methods: {\n    getStatusText(status) {\n      const statusMap = {\n        'idle': '未开始',\n        'running': '进行中',\n        'success': '成功',\n        'failure': '失败'\n      };\n      return statusMap[status] || status;\n    },\n    async runTest(testCase) {\n      testCase.status = 'running';\n      try {\n        const response = await axios.post('http://localhost:8080/runTest', {\n          groupName: this.group.name,\n          testName: testCase.name\n        });\n        testCase.status = response.data.success ? 'success' : 'failure';\n        testCase.result = response.data.result;\n        return response.data.success;\n      } catch (error) {\n        testCase.status = 'failure';\n        testCase.result = error.message;\n        return false;\n      }\n    },\n    async runAllTests() {\n      this.isRunning = true;\n      for (let testCase of this.group.testCases) {\n        const success = await this.runTest(testCase);\n        if (!success) break;\n      }\n      this.isRunning = false;\n    },\n    async runSingleTest(index) {\n      if (this.isRunning || this.group.testCases[index].status === 'running') {\n        return;\n      }\n      await this.runTest(this.group.testCases[index]);\n    }\n  }\n}\n</script>\n\n<style scoped>\n/* 样式保持不变 */\n</style>"],"mappings":";;;EACOA,KAAK,EAAC;AAAY;;EAEhBA,KAAK,EAAC;AAAY;mBAH3B;;EAAAC,GAAA;AAAA;mBAAA;;uBACEC,mBAAA,CAoBM,OApBNC,UAoBM,GAnBJC,mBAAA,CAAyB,YAAAC,gBAAA,CAAlBC,MAAA,CAAAC,KAAK,CAACC,IAAI,kBACjBJ,mBAAA,CAgBM,OAhBNK,UAgBM,I,kBAfJP,mBAAA,CAcMQ,SAAA,QAlBZC,WAAA,CAKsCL,MAAA,CAAAC,KAAK,CAACK,SAAS,EALrD,CAKkBC,QAAQ,EAAEC,KAAK;yBAD3BZ,mBAAA,CAcM;MAZDD,GAAG,EAAEa,KAAK;MACXd,KAAK,EAPfe,eAAA,EAOgB,WAAW;mBACcF,QAAQ,CAACG,MAAM;mBAAqCH,QAAQ,CAACG,MAAM;mBAAqCH,QAAQ,CAACG,MAAM;;MAKrJC,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,aAAa,CAACN,KAAK;QAE7BV,mBAAA,CAA4B,YAAAC,gBAAA,CAArBQ,QAAQ,CAACL,IAAI,kBACpBJ,mBAAA,CAA+C,WAA5C,MAAI,GAAAC,gBAAA,CAAGc,QAAA,CAAAE,aAAa,CAACR,QAAQ,CAACG,MAAM,mBAC9BH,QAAQ,CAACS,MAAM,I,cAAxBpB,mBAAA,CAAuD,KAjB/DqB,UAAA,EAiBkC,MAAI,GAAAlB,gBAAA,CAAGQ,QAAQ,CAACS,MAAM,oBAjBxDE,mBAAA,e,yBAAAC,UAAA;oCAoBIrB,mBAAA,CAAkE;IAAzDa,OAAK,EAAAS,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAER,QAAA,CAAAS,WAAA,IAAAT,QAAA,CAAAS,WAAA,IAAAD,IAAA,CAAW;IAAGE,QAAQ,EAAEC,KAAA,CAAAC;KAAW,QAAM,iBApB7DC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}