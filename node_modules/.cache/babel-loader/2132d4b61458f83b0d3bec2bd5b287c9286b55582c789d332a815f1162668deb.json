{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-b87d12e6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"test-group\"\n};\nconst _hoisted_2 = {\n  class: \"group-title\"\n};\nconst _hoisted_3 = {\n  class: \"test-cases\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"test-name\"\n};\nconst _hoisted_6 = {\n  class: \"test-status\"\n};\nconst _hoisted_7 = {\n  key: 0,\n  class: \"test-result\"\n};\nconst _hoisted_8 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", _hoisted_2, _toDisplayString($props.group.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.group.testCases, testCase => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: testCase.id,\n      class: _normalizeClass([\"test-case\", testCase.status]),\n      onClick: $event => $setup.runSingleTest(testCase)\n    }, [_createElementVNode(\"h3\", _hoisted_5, _toDisplayString(testCase.name), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_6, \"状态: \" + _toDisplayString($setup.getStatusText(testCase.status)), 1 /* TEXT */), testCase.result ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, \"结果: \" + _toDisplayString(testCase.result), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)], 10 /* CLASS, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.runAllTests && $setup.runAllTests(...args)),\n    disabled: $setup.isRunning,\n    class: \"run-all-btn\"\n  }, \" 运行所有测试 \", 8 /* PROPS */, _hoisted_8)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$props","group","name","_hoisted_3","_Fragment","_renderList","testCases","testCase","id","_normalizeClass","status","onClick","$event","$setup","runSingleTest","_hoisted_5","_hoisted_6","getStatusText","result","_hoisted_7","_createCommentVNode","_hoisted_4","_cache","args","runAllTests","disabled","isRunning","_hoisted_8"],"sources":["/Users/rika/work/src/auto-test/src/components/TestGroup.vue"],"sourcesContent":["<template>\n  <div class=\"test-group\">\n    <h2 class=\"group-title\">{{ group.name }}</h2>\n    <div class=\"test-cases\">\n      <div\n          v-for=\"testCase in group.testCases\"\n          :key=\"testCase.id\"\n          class=\"test-case\"\n          :class=\"testCase.status\"\n          @click=\"runSingleTest(testCase)\"\n      >\n        <h3 class=\"test-name\">{{ testCase.name }}</h3>\n        <p class=\"test-status\">状态: {{ getStatusText(testCase.status) }}</p>\n        <p v-if=\"testCase.result\" class=\"test-result\">结果: {{ testCase.result }}</p>\n      </div>\n    </div>\n    <button @click=\"runAllTests\" :disabled=\"isRunning\" class=\"run-all-btn\">\n      运行所有测试\n    </button>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\n\nexport default {\n  name: 'TestGroup',\n  props: {\n    group: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    const isRunning = ref(false);\n\n    const getStatusText = (status) => {\n      const statusMap = {\n        'idle': '未开始',\n        'running': '进行中',\n        'success': '成功',\n        'failure': '失败'\n      };\n      return statusMap[status] || status;\n    };\n\n    const runTest = async (testCase) => {\n      testCase.status = 'running';\n      // 模拟异步测试运行\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      testCase.status = Math.random() > 0.5 ? 'success' : 'failure';\n      testCase.result = testCase.status === 'success' ? '测试通过' : '测试失败';\n      return testCase.status === 'success';\n    };\n\n    const runAllTests = async () => {\n      isRunning.value = true;\n      for (let testCase of props.group.testCases) {\n        const success = await runTest(testCase);\n        if (!success) break;\n      }\n      isRunning.value = false;\n    };\n\n    const runSingleTest = async (testCase) => {\n      if (isRunning.value || testCase.status === 'running') {\n        return;\n      }\n      await runTest(testCase);\n    };\n\n    return {\n      isRunning,\n      getStatusText,\n      runAllTests,\n      runSingleTest\n    };\n  }\n};\n</script>\n\n<style scoped>\n.test-group {\n  background-color: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  padding: 20px;\n  margin: 20px 0;\n}\n\n.group-title {\n  color: #333;\n  margin-top: 0;\n  margin-bottom: 20px;\n  font-size: 1.5em;\n}\n\n.test-cases {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  gap: 15px;\n  margin-bottom: 20px;\n}\n\n.test-case {\n  background-color: #f9f9f9;\n  border-radius: 6px;\n  padding: 15px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.test-case:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.test-case.running {\n  background-color: #fff9c4;\n}\n\n.test-case.success {\n  background-color: #c8e6c9;\n}\n\n.test-case.failure {\n  background-color: #ffcdd2;\n}\n\n.test-name {\n  margin: 0 0 10px 0;\n  font-size: 1.1em;\n  color: #444;\n}\n\n.test-status, .test-result {\n  margin: 5px 0;\n  font-size: 0.9em;\n  color: #666;\n}\n\n.run-all-btn {\n  background-color: #4CAF50;\n  border: none;\n  color: white;\n  padding: 10px 20px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin-top: 10px;\n  cursor: pointer;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n}\n\n.run-all-btn:hover {\n  background-color: #45a049;\n}\n\n.run-all-btn:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n</style>"],"mappings":";;;EACOA,KAAK,EAAC;AAAY;;EACjBA,KAAK,EAAC;AAAa;;EAClBA,KAAK,EAAC;AAAY;mBAH3B;;EAWYA,KAAK,EAAC;AAAW;;EAClBA,KAAK,EAAC;AAAa;;EAZ9BC,GAAA;EAakCD,KAAK,EAAC;;mBAbxC;;uBACEE,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJC,mBAAA,CAA6C,MAA7CC,UAA6C,EAAAC,gBAAA,CAAlBC,MAAA,CAAAC,KAAK,CAACC,IAAI,kBACrCL,mBAAA,CAYM,OAZNM,UAYM,I,kBAXJR,mBAAA,CAUMS,SAAA,QAdZC,WAAA,CAK6BL,MAAA,CAAAC,KAAK,CAACK,SAAS,EAA3BC,QAAQ;yBADnBZ,mBAAA,CAUM;MARDD,GAAG,EAAEa,QAAQ,CAACC,EAAE;MACjBf,KAAK,EAPfgB,eAAA,EAOgB,WAAW,EACTF,QAAQ,CAACG,MAAM;MACtBC,OAAK,EAAAC,MAAA,IAAEC,MAAA,CAAAC,aAAa,CAACP,QAAQ;QAEhCV,mBAAA,CAA8C,MAA9CkB,UAA8C,EAAAhB,gBAAA,CAArBQ,QAAQ,CAACL,IAAI,kBACtCL,mBAAA,CAAmE,KAAnEmB,UAAmE,EAA5C,MAAI,GAAAjB,gBAAA,CAAGc,MAAA,CAAAI,aAAa,CAACV,QAAQ,CAACG,MAAM,mBAClDH,QAAQ,CAACW,MAAM,I,cAAxBvB,mBAAA,CAA2E,KAA3EwB,UAA2E,EAA7B,MAAI,GAAApB,gBAAA,CAAGQ,QAAQ,CAACW,MAAM,oBAb5EE,mBAAA,e,yBAAAC,UAAA;oCAgBIxB,mBAAA,CAES;IAFAc,OAAK,EAAAW,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEV,MAAA,CAAAW,WAAA,IAAAX,MAAA,CAAAW,WAAA,IAAAD,IAAA,CAAW;IAAGE,QAAQ,EAAEZ,MAAA,CAAAa,SAAS;IAAEjC,KAAK,EAAC;KAAc,UAEvE,iBAlBJkC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}