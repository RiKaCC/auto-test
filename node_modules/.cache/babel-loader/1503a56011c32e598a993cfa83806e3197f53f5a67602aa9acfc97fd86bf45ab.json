{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-b87d12e6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"test-group\"\n};\nconst _hoisted_2 = {\n  class: \"group-title\"\n};\nconst _hoisted_3 = {\n  class: \"test-cases\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  class: \"test-name\"\n};\nconst _hoisted_6 = {\n  class: \"test-status\"\n};\nconst _hoisted_7 = {\n  class: \"test-result\"\n};\nconst _hoisted_8 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h3\", _hoisted_2, _toDisplayString($props.group.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.group.testCases, testCase => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: testCase.id,\n      class: _normalizeClass([\"test-case\", testCase.status]),\n      onClick: $event => $setup.runSingleTest(testCase)\n    }, [_createElementVNode(\"div\", _hoisted_5, _toDisplayString(testCase.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_6, \"状态: \" + _toDisplayString($setup.getStatusText(testCase.status)), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, \"结果: \" + _toDisplayString(testCase.result), 1 /* TEXT */)], 10 /* CLASS, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"button\", {\n    class: \"run-all-btn\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.runAllTests && $setup.runAllTests(...args)),\n    disabled: $setup.isRunning\n  }, \"运行所有测试\", 8 /* PROPS */, _hoisted_8)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$props","group","name","_hoisted_3","_Fragment","_renderList","testCases","testCase","key","id","_normalizeClass","status","onClick","$event","$setup","runSingleTest","_hoisted_5","_hoisted_6","getStatusText","_hoisted_7","result","_hoisted_4","_cache","args","runAllTests","disabled","isRunning","_hoisted_8"],"sources":["/Users/rika/work/src/auto-test/src/components/TestGroup.vue"],"sourcesContent":["<template>\n    <div class=\"test-group\">\n        <h3 class=\"group-title\">{{ group.name }}</h3>\n        <div class=\"test-cases\">\n            <div v-for=\"testCase in group.testCases\" :key=\"testCase.id\" class=\"test-case\" :class=\"testCase.status\" @click=\"runSingleTest(testCase)\">\n                <div class=\"test-name\">{{ testCase.name }}</div>\n                <div class=\"test-status\">状态: {{ getStatusText(testCase.status) }}</div>\n                <div class=\"test-result\">结果: {{ testCase.result }}</div>\n            </div>\n        </div>\n        <button class=\"run-all-btn\" @click=\"runAllTests\" :disabled=\"isRunning\">运行所有测试</button>\n    </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\n\nexport default {\n    name: 'TestGroup',\n    props: {\n        group: {\n            type: Object,\n            required: true\n        },\n        sharedState: {\n            type: Object,\n            required: true\n        }\n    },\n    setup(props) {\n        const isRunning = ref(false);\n\n        const getStatusText = (status) => {\n            const statusMap = {\n                'idle': '未开始',\n                'running': '进行中',\n                'success': '成功',\n                'failure': '失败'\n            };\n            return statusMap[status] || status;\n        };\n\n        const runTest = async (testCase) => {\n            testCase.status = 'running';\n            const result = await testCase.testFunction(props.sharedState);\n            testCase.status = result;\n            testCase.result = result === 'success' ? '测试通过' : '测试失败';\n            return result === 'success';\n        };\n\n        const runAllTests = async () => {\n            isRunning.value = true;\n            for (let testCase of props.group.testCases) {\n                const success = await runTest(testCase);\n                if (!success) break;\n            }\n            isRunning.value = false;\n        };\n\n        const runSingleTest = async (testCase) => {\n            if (isRunning.value || testCase.status === 'running') {\n                return;\n            }\n            await runTest(testCase);\n        };\n\n        return {\n            isRunning,\n            getStatusText,\n            runAllTests,\n            runSingleTest\n        };\n    }\n};\n</script>\n\n<style scoped>\n.test-group {\n    background-color: #ffffff;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    padding: 20px;\n    margin: 20px 0;\n}\n\n.group-title {\n    color: #333;\n    margin-top: 0;\n    margin-bottom: 20px;\n    font-size: 1.5em;\n}\n\n.test-cases {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n    gap: 15px;\n    margin-bottom: 20px;\n}\n\n.test-case {\n    background-color: #f9f9f9;\n    border-radius: 6px;\n    padding: 15px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.test-case:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.test-case.running {\n    background-color: #fff9c4;\n}\n\n.test-case.success {\n    background-color: #c8e6c9;\n}\n\n.test-case.failure {\n    background-color: #ffcdd2;\n}\n\n.test-name {\n    margin: 0 0 10px 0;\n    font-size: 1.1em;\n    color: #444;\n}\n\n.test-status, .test-result {\n    margin: 5px 0;\n    font-size: 0.9em;\n    color: #666;\n}\n\n.run-all-btn {\n    background-color: #4CAF50;\n    border: none;\n    color: white;\n    padding: 10px 20px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin-top: 10px;\n    cursor: pointer;\n    border-radius: 4px;\n    transition: background-color 0.3s ease;\n}\n\n.run-all-btn:hover {\n    background-color: #45a049;\n}\n\n.run-all-btn:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n}\n</style>"],"mappings":";;;EACSA,KAAK,EAAC;AAAY;;EACfA,KAAK,EAAC;AAAa;;EAClBA,KAAK,EAAC;AAAY;mBAH/B;;EAKqBA,KAAK,EAAC;AAAW;;EACjBA,KAAK,EAAC;AAAa;;EACnBA,KAAK,EAAC;AAAa;mBAPxC;;uBACIC,mBAAA,CAUM,OAVNC,UAUM,GATFC,mBAAA,CAA6C,MAA7CC,UAA6C,EAAAC,gBAAA,CAAlBC,MAAA,CAAAC,KAAK,CAACC,IAAI,kBACrCL,mBAAA,CAMM,OANNM,UAMM,I,kBALFR,mBAAA,CAIMS,SAAA,QARlBC,WAAA,CAIoCL,MAAA,CAAAC,KAAK,CAACK,SAAS,EAA3BC,QAAQ;yBAApBZ,mBAAA,CAIM;MAJoCa,GAAG,EAAED,QAAQ,CAACE,EAAE;MAAEf,KAAK,EAJ7EgB,eAAA,EAI8E,WAAW,EAASH,QAAQ,CAACI,MAAM;MAAGC,OAAK,EAAAC,MAAA,IAAEC,MAAA,CAAAC,aAAa,CAACR,QAAQ;QACjIV,mBAAA,CAAgD,OAAhDmB,UAAgD,EAAAjB,gBAAA,CAAtBQ,QAAQ,CAACL,IAAI,kBACvCL,mBAAA,CAAuE,OAAvEoB,UAAuE,EAA9C,MAAI,GAAAlB,gBAAA,CAAGe,MAAA,CAAAI,aAAa,CAACX,QAAQ,CAACI,MAAM,mBAC7Dd,mBAAA,CAAwD,OAAxDsB,UAAwD,EAA/B,MAAI,GAAApB,gBAAA,CAAGQ,QAAQ,CAACa,MAAM,iB,yBAP/DC,UAAA;oCAUQxB,mBAAA,CAAsF;IAA9EH,KAAK,EAAC,aAAa;IAAEkB,OAAK,EAAAU,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAET,MAAA,CAAAU,WAAA,IAAAV,MAAA,CAAAU,WAAA,IAAAD,IAAA,CAAW;IAAGE,QAAQ,EAAEX,MAAA,CAAAY;KAAW,QAAM,iBAVrFC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}